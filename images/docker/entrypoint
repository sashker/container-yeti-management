#!/bin/bash -l
#Make our script a little bit safer
set -eo pipefail

log::m-info "Writing $APP config file ..."
cat > /etc/yeti/management.cfg <<EOF
daemon {
    listen = {
        "tcp://$MANAGER_ADDRESS:$MANAGER_PORT",
    }

    sctp {
        address = "127.0.0.1"
        port = 4444
    }

    http {
        address = "127.0.0.1"
        port = 3000
    }

    log_level = $MANAGER_LOG_LEVEL
}
EOF

log::m-info "Writing system.cfg ..."
cat > /etc/yeti/system.cfg <<EOF
signalling {
	globals {
		yeti {
			pop_id = 2
			msg_logger_dir = /var/spool/sems/dump
			audio_recorder_dir = /var/spool/sems/record
			audio_recorder_compress = true
			log_dir = /tmp
			routing {
				schema = switch8
				function = route_release
				init = init

				master_pool {
					host = 127.0.0.1
					port = 5432
					name = yeti
					user = yeti
					pass = yeti

					size = 4
					check_interval = 10
					max_exceptions = 0
					statement_timeout=3000
				}

				failover_to_slave = false
				slave_pool {
					host = 127.0.0.1
					port = 5432
					name = yeti
					user = yeti
					pass = yeti

					size = 4
					check_interval = 10
					max_exceptions = 0
					statement_timeout=3000
				}

				cache {
					enabled = false
					check_interval = 60
					buckets = 100000
				}

				use_radius = false
			}

			cdr {
				dir = /var/spool/sems/cdrs
				completed_dir = /var/spool/sems/cdrs/completed

				pool_size = 2
				batch_size = 10
				batch_timeout = 10000
				check_interval = 2000

				schema = switch
				function = writecdr

				master {
					host = 127.0.0.1
					port = 5433
					name = cdr
					user = cdr
					pass = cdr
				}

				failover_to_slave = false
				slave {
					host = 127.0.0.1
					port = 5433
					name = cdr
					user = cdr
					pass = cdr
				}

				failover_requeue = true
				failover_to_file = false
				serialize_dynamic_fields = false
			}

			resources {
				reject_on_error = false
				write {
					//socket = /var/run/redis/redis.sock
					host = 127.0.0.1
					port = 6379
					size = 2
					timeout = 500
				}
				read {
					//socket = /var/run/redis/redis.sock
					host = 127.0.0.1
					port = 6379
					size = 2
					timeout = 1000
				}
			}
			
			registrations {
				check_interval = 5000
			}
			
			rpc {
				calls_show_limit = 1000
			}

#			statistics {
#				active-calls {
#					period = 5
#					clickhouse {
#						table = active_calls
#						queue = snapshots
#						buffering = false
#						allowed_fields = {
#							resources,
#							audio_record_enabled,
#							auth_orig_ip,
#							auth_orig_port
#						}
#					}
#				}
#			}
		}
	}
	node 0 { }
}

lnp {
	globals {
		daemon {
			listen = {
				"tcp://127.0.0.1:3333",
				"tcp://127.0.0.1:3332"
			}
			log_level = 2
		}
		db {
			host = 127.0.0.1
			port = 5432
			name = yeti
			user = yeti
			pass = yeti
			schema = switch8
			conn_timeout = 0
			check_interval = 5000
		}
		sip {
			contact_user = yeti-lnp-resolver
			from_uri = sip:yeti-lnp-resolver@localhost
			from_name = yeti-lnp-resolver
		}
	}
	node 0 { }
}
EOF

log::m-info "Starting $APP ..."
exec gosu $USER yeti_management -f
